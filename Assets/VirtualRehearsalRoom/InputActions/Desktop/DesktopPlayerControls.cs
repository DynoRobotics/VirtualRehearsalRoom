//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/VirtualRehearsalRoom/InputActions/Desktop/DesktopPlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DesktopPlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DesktopPlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DesktopPlayerControls"",
    ""maps"": [
        {
            ""name"": ""GroundMovement"",
            ""id"": ""be34349e-097e-40d2-9c0c-7e7d2b34b243"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b8fe5bbc-f47d-4e6b-bfd4-c8a129d4e54e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VerticalMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f07279e2-cdee-464d-9443-fadc94513ed2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3a0e6d40-fc9b-4836-88d0-dbca0106a7a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0a82ad18-ea22-49d9-ba84-05818e14a5b1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2777524c-142e-4004-aec9-c136f2a10022"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleMouseMode"",
                    ""type"": ""Button"",
                    ""id"": ""2a6fcc6e-3d34-4bea-871d-b1c7dace9dc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""99454354-8d5b-401d-8d91-f0760d3397e8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0e880c73-46fa-486d-8419-5eb0a6e05a58"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cd5d37d4-3855-4937-a7ef-c618be7eb569"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c0434f3-65a2-46fd-871f-dd15f14e91dc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""89eb7960-fec1-4404-966b-73cf2601b72b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8cba020e-5b3a-4722-9ff2-8ace03219f7b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65078ec2-f08e-4451-8c17-7dedf19e0d4e"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfe45a32-621d-4923-8e37-f740a474768d"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fe6e036-3125-4e58-90f7-55add118e7a9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleMouseMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""UpDown"",
                    ""id"": ""8be360d6-5d61-41b5-9d2f-0527f399e256"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""134c291d-f523-4569-8e9d-4b5f0298f0e8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""491b314f-b427-402c-91c7-5eb45dc0c58e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MultiplayerControls"",
            ""id"": ""e870d938-1d07-4be7-9bb7-a0a760f15f39"",
            ""actions"": [
                {
                    ""name"": ""ChangeSceneToOutdoors"",
                    ""type"": ""Button"",
                    ""id"": ""7f365c2d-2bb6-4b90-b9b3-e97c1cc36ba5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeSceneToDanceTheatre"",
                    ""type"": ""Button"",
                    ""id"": ""9c30a202-831d-41ef-97fb-3d86dd7a218c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectNextAvatar"",
                    ""type"": ""Button"",
                    ""id"": ""1f640d14-28d4-498e-a35a-6812f167cd05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectPreviousAvatar"",
                    ""type"": ""Button"",
                    ""id"": ""0cd9f891-ac92-479c-8691-62b032750934"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76240240-0311-4d13-b97a-b201826151d4"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSceneToOutdoors"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acfb6232-1a3e-4547-81ec-7e5bb39afd40"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSceneToDanceTheatre"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a045ffae-7a06-46f0-aea1-eaeeed4f313d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectNextAvatar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04df2b6a-3b71-4244-a593-cbbd1c66545a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPreviousAvatar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FlyingMovement"",
            ""id"": ""191b12f2-cc98-42c0-8588-f1537013da43"",
            ""actions"": [
                {
                    ""name"": ""VerticalMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c0d6d1cb-9d8b-41a7-a0d7-800626defe6a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""00af4bad-613f-4c93-8b31-84a02b22e2ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""UpDown"",
                    ""id"": ""703628a6-39ef-45cf-8ebf-4ce2128a57d1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2c422aae-a4ff-4571-b95b-a56b38709ec5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a3bce4b8-1822-4580-89ec-34ab93489c8f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""9f9b9e05-0b57-49f7-b33d-75622016febf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f2895a9a-d633-46b1-839e-175eae086fb2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3571b627-90dd-403b-9431-4bf97627d9e3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0771fff8-c8da-4a15-910b-0e96a6111605"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bf1065b0-f693-4997-9b04-067d2c0d0025"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GroundMovement
        m_GroundMovement = asset.FindActionMap("GroundMovement", throwIfNotFound: true);
        m_GroundMovement_HorizontalMovement = m_GroundMovement.FindAction("HorizontalMovement", throwIfNotFound: true);
        m_GroundMovement_VerticalMovement = m_GroundMovement.FindAction("VerticalMovement", throwIfNotFound: true);
        m_GroundMovement_Jump = m_GroundMovement.FindAction("Jump", throwIfNotFound: true);
        m_GroundMovement_MouseX = m_GroundMovement.FindAction("MouseX", throwIfNotFound: true);
        m_GroundMovement_MouseY = m_GroundMovement.FindAction("MouseY", throwIfNotFound: true);
        m_GroundMovement_ToggleMouseMode = m_GroundMovement.FindAction("ToggleMouseMode", throwIfNotFound: true);
        // MultiplayerControls
        m_MultiplayerControls = asset.FindActionMap("MultiplayerControls", throwIfNotFound: true);
        m_MultiplayerControls_ChangeSceneToOutdoors = m_MultiplayerControls.FindAction("ChangeSceneToOutdoors", throwIfNotFound: true);
        m_MultiplayerControls_ChangeSceneToDanceTheatre = m_MultiplayerControls.FindAction("ChangeSceneToDanceTheatre", throwIfNotFound: true);
        m_MultiplayerControls_SelectNextAvatar = m_MultiplayerControls.FindAction("SelectNextAvatar", throwIfNotFound: true);
        m_MultiplayerControls_SelectPreviousAvatar = m_MultiplayerControls.FindAction("SelectPreviousAvatar", throwIfNotFound: true);
        // FlyingMovement
        m_FlyingMovement = asset.FindActionMap("FlyingMovement", throwIfNotFound: true);
        m_FlyingMovement_VerticalMovement = m_FlyingMovement.FindAction("VerticalMovement", throwIfNotFound: true);
        m_FlyingMovement_HorizontalMovement = m_FlyingMovement.FindAction("HorizontalMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GroundMovement
    private readonly InputActionMap m_GroundMovement;
    private IGroundMovementActions m_GroundMovementActionsCallbackInterface;
    private readonly InputAction m_GroundMovement_HorizontalMovement;
    private readonly InputAction m_GroundMovement_VerticalMovement;
    private readonly InputAction m_GroundMovement_Jump;
    private readonly InputAction m_GroundMovement_MouseX;
    private readonly InputAction m_GroundMovement_MouseY;
    private readonly InputAction m_GroundMovement_ToggleMouseMode;
    public struct GroundMovementActions
    {
        private @DesktopPlayerControls m_Wrapper;
        public GroundMovementActions(@DesktopPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMovement => m_Wrapper.m_GroundMovement_HorizontalMovement;
        public InputAction @VerticalMovement => m_Wrapper.m_GroundMovement_VerticalMovement;
        public InputAction @Jump => m_Wrapper.m_GroundMovement_Jump;
        public InputAction @MouseX => m_Wrapper.m_GroundMovement_MouseX;
        public InputAction @MouseY => m_Wrapper.m_GroundMovement_MouseY;
        public InputAction @ToggleMouseMode => m_Wrapper.m_GroundMovement_ToggleMouseMode;
        public InputActionMap Get() { return m_Wrapper.m_GroundMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundMovementActions set) { return set.Get(); }
        public void SetCallbacks(IGroundMovementActions instance)
        {
            if (m_Wrapper.m_GroundMovementActionsCallbackInterface != null)
            {
                @HorizontalMovement.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnHorizontalMovement;
                @VerticalMovement.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnVerticalMovement;
                @VerticalMovement.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnVerticalMovement;
                @VerticalMovement.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnVerticalMovement;
                @Jump.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnJump;
                @MouseX.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseX;
                @MouseY.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMouseY;
                @ToggleMouseMode.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnToggleMouseMode;
                @ToggleMouseMode.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnToggleMouseMode;
                @ToggleMouseMode.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnToggleMouseMode;
            }
            m_Wrapper.m_GroundMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalMovement.started += instance.OnHorizontalMovement;
                @HorizontalMovement.performed += instance.OnHorizontalMovement;
                @HorizontalMovement.canceled += instance.OnHorizontalMovement;
                @VerticalMovement.started += instance.OnVerticalMovement;
                @VerticalMovement.performed += instance.OnVerticalMovement;
                @VerticalMovement.canceled += instance.OnVerticalMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
                @ToggleMouseMode.started += instance.OnToggleMouseMode;
                @ToggleMouseMode.performed += instance.OnToggleMouseMode;
                @ToggleMouseMode.canceled += instance.OnToggleMouseMode;
            }
        }
    }
    public GroundMovementActions @GroundMovement => new GroundMovementActions(this);

    // MultiplayerControls
    private readonly InputActionMap m_MultiplayerControls;
    private IMultiplayerControlsActions m_MultiplayerControlsActionsCallbackInterface;
    private readonly InputAction m_MultiplayerControls_ChangeSceneToOutdoors;
    private readonly InputAction m_MultiplayerControls_ChangeSceneToDanceTheatre;
    private readonly InputAction m_MultiplayerControls_SelectNextAvatar;
    private readonly InputAction m_MultiplayerControls_SelectPreviousAvatar;
    public struct MultiplayerControlsActions
    {
        private @DesktopPlayerControls m_Wrapper;
        public MultiplayerControlsActions(@DesktopPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeSceneToOutdoors => m_Wrapper.m_MultiplayerControls_ChangeSceneToOutdoors;
        public InputAction @ChangeSceneToDanceTheatre => m_Wrapper.m_MultiplayerControls_ChangeSceneToDanceTheatre;
        public InputAction @SelectNextAvatar => m_Wrapper.m_MultiplayerControls_SelectNextAvatar;
        public InputAction @SelectPreviousAvatar => m_Wrapper.m_MultiplayerControls_SelectPreviousAvatar;
        public InputActionMap Get() { return m_Wrapper.m_MultiplayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MultiplayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IMultiplayerControlsActions instance)
        {
            if (m_Wrapper.m_MultiplayerControlsActionsCallbackInterface != null)
            {
                @ChangeSceneToOutdoors.started -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnChangeSceneToOutdoors;
                @ChangeSceneToOutdoors.performed -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnChangeSceneToOutdoors;
                @ChangeSceneToOutdoors.canceled -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnChangeSceneToOutdoors;
                @ChangeSceneToDanceTheatre.started -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnChangeSceneToDanceTheatre;
                @ChangeSceneToDanceTheatre.performed -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnChangeSceneToDanceTheatre;
                @ChangeSceneToDanceTheatre.canceled -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnChangeSceneToDanceTheatre;
                @SelectNextAvatar.started -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnSelectNextAvatar;
                @SelectNextAvatar.performed -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnSelectNextAvatar;
                @SelectNextAvatar.canceled -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnSelectNextAvatar;
                @SelectPreviousAvatar.started -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnSelectPreviousAvatar;
                @SelectPreviousAvatar.performed -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnSelectPreviousAvatar;
                @SelectPreviousAvatar.canceled -= m_Wrapper.m_MultiplayerControlsActionsCallbackInterface.OnSelectPreviousAvatar;
            }
            m_Wrapper.m_MultiplayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeSceneToOutdoors.started += instance.OnChangeSceneToOutdoors;
                @ChangeSceneToOutdoors.performed += instance.OnChangeSceneToOutdoors;
                @ChangeSceneToOutdoors.canceled += instance.OnChangeSceneToOutdoors;
                @ChangeSceneToDanceTheatre.started += instance.OnChangeSceneToDanceTheatre;
                @ChangeSceneToDanceTheatre.performed += instance.OnChangeSceneToDanceTheatre;
                @ChangeSceneToDanceTheatre.canceled += instance.OnChangeSceneToDanceTheatre;
                @SelectNextAvatar.started += instance.OnSelectNextAvatar;
                @SelectNextAvatar.performed += instance.OnSelectNextAvatar;
                @SelectNextAvatar.canceled += instance.OnSelectNextAvatar;
                @SelectPreviousAvatar.started += instance.OnSelectPreviousAvatar;
                @SelectPreviousAvatar.performed += instance.OnSelectPreviousAvatar;
                @SelectPreviousAvatar.canceled += instance.OnSelectPreviousAvatar;
            }
        }
    }
    public MultiplayerControlsActions @MultiplayerControls => new MultiplayerControlsActions(this);

    // FlyingMovement
    private readonly InputActionMap m_FlyingMovement;
    private IFlyingMovementActions m_FlyingMovementActionsCallbackInterface;
    private readonly InputAction m_FlyingMovement_VerticalMovement;
    private readonly InputAction m_FlyingMovement_HorizontalMovement;
    public struct FlyingMovementActions
    {
        private @DesktopPlayerControls m_Wrapper;
        public FlyingMovementActions(@DesktopPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @VerticalMovement => m_Wrapper.m_FlyingMovement_VerticalMovement;
        public InputAction @HorizontalMovement => m_Wrapper.m_FlyingMovement_HorizontalMovement;
        public InputActionMap Get() { return m_Wrapper.m_FlyingMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlyingMovementActions set) { return set.Get(); }
        public void SetCallbacks(IFlyingMovementActions instance)
        {
            if (m_Wrapper.m_FlyingMovementActionsCallbackInterface != null)
            {
                @VerticalMovement.started -= m_Wrapper.m_FlyingMovementActionsCallbackInterface.OnVerticalMovement;
                @VerticalMovement.performed -= m_Wrapper.m_FlyingMovementActionsCallbackInterface.OnVerticalMovement;
                @VerticalMovement.canceled -= m_Wrapper.m_FlyingMovementActionsCallbackInterface.OnVerticalMovement;
                @HorizontalMovement.started -= m_Wrapper.m_FlyingMovementActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.performed -= m_Wrapper.m_FlyingMovementActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.canceled -= m_Wrapper.m_FlyingMovementActionsCallbackInterface.OnHorizontalMovement;
            }
            m_Wrapper.m_FlyingMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @VerticalMovement.started += instance.OnVerticalMovement;
                @VerticalMovement.performed += instance.OnVerticalMovement;
                @VerticalMovement.canceled += instance.OnVerticalMovement;
                @HorizontalMovement.started += instance.OnHorizontalMovement;
                @HorizontalMovement.performed += instance.OnHorizontalMovement;
                @HorizontalMovement.canceled += instance.OnHorizontalMovement;
            }
        }
    }
    public FlyingMovementActions @FlyingMovement => new FlyingMovementActions(this);
    public interface IGroundMovementActions
    {
        void OnHorizontalMovement(InputAction.CallbackContext context);
        void OnVerticalMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
        void OnToggleMouseMode(InputAction.CallbackContext context);
    }
    public interface IMultiplayerControlsActions
    {
        void OnChangeSceneToOutdoors(InputAction.CallbackContext context);
        void OnChangeSceneToDanceTheatre(InputAction.CallbackContext context);
        void OnSelectNextAvatar(InputAction.CallbackContext context);
        void OnSelectPreviousAvatar(InputAction.CallbackContext context);
    }
    public interface IFlyingMovementActions
    {
        void OnVerticalMovement(InputAction.CallbackContext context);
        void OnHorizontalMovement(InputAction.CallbackContext context);
    }
}
